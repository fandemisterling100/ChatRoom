"""Consumer class for the undocked bot. It checks the
   validity of the command, takes queries from the queue
   generated by the chat application and returns three
   possible types of response depending on the result:
    1. Success: Returns the message with the share quote
    2. API error: The bot could not return a valid value
       for the requested stock code
    3. User error: The sent command doesn't have a valid format
"""
import pika
from .api import StooqAPI

QUEUE = 'stock'


def redistribute(client, message):
    """Sends the response of the bot to
       the queue of the user who generated
       the query

       Parameters:
            client (str): Username
            message (str): Bot answer
    """
    print("Trying to redistribute bot answer...")
    queue = f"BotStocks-{client}"
    connection = pika.BlockingConnection(
        pika.ConnectionParameters('localhost'))
    channel = connection.channel()
    channel.queue_declare(queue=queue)
    channel.basic_publish(
        exchange='',
        routing_key=queue,
        body=message)
    connection.close()


class _BotConsumer:

    # Response types
    RETURNS = {"API_error": "I couldn't return the information.",
               "Success": "stock_code quote is $value per share",
               "user_error": "Please verify your stock command."}

    def __init__(self):
        self.connection = pika.BlockingConnection(
            pika.ConnectionParameters('localhost'))
        self.channel = self.connection.channel()
        self.channel.queue_declare(queue=QUEUE)
        self.channel.basic_consume(QUEUE,
                                   self.callback,
                                   auto_ack=True)
        self.client = ''
        self.start_consuming()

    def start_consuming(self):
        print("BotConsumer has started consuming...")
        self.channel.start_consuming()

    def callback(self, ch, method, properties, body):
        print("BotConsumer received a message from the queue...")
        self.client, stock_code = self._validate_message(body)

        # The consult needs a valid user
        if not self.client:
            return

        if stock_code:
            try:
                share_value = StooqAPI.get_stock_quote(stock_code)
            except:
                redistribute(self.client, self.RETURNS.get('API_error'))
            else:
                print("API answered!")
                # Validate share value and send it to a queue as
                # a formatted message
                if share_value != 0:
                    bot_answer = self.RETURNS.get("Success")
                    bot_answer = bot_answer.replace("stock_code", stock_code.upper())
                    bot_answer = bot_answer.replace("value", str(share_value))
                    redistribute(self.client, bot_answer)
                else:
                    redistribute(self.client, self.RETURNS.get('API_error'))
        else:
            redistribute(self.client, self.RETURNS.get('user_error'))

    @staticmethod
    def _validate_message(message):
        """Validates that the message collected
           from the queue has the proper format.

           Parameters:
                message (str): Message from queue
            Returns:
                (tuple): (username, stock_code)
        """
        message = message.decode('utf-8')
        try:
            return message.split(':')
        except:
            return None, None

if __name__ == '__main__':
    print("Starting BotConsumer...")
    _BotConsumer()
